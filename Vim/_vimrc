let os=substitute(system('uname'), '\n', '', '')

set nocompatible
if has("win32")
  source $VIMRUNTIME/vimrc_example.vim
  source $VIMRUNTIME/mswin.vim
  behave mswin
endif

"=======================================================================================
"                                   Plugins Setups
"=======================================================================================

if has('vim_starting')
   if has("win32")
      set runtimepath+=$VIMRUNTIME/../vimfiles/bundle/neobundle.vim/
   else
      set runtimepath+=~/.vim/bundle/neobundle.vim/
   endif
endif

call neobundle#rc(expand('~/.vim/bundle/'))

 " Let NeoBundle manage NeoBundle
 NeoBundleFetch 'Shougo/neobundle.vim'

 " Recommended to install
 " After install, turn shell ~/.vim/bundle/vimproc, (n,g)make -f your_machines_makefile
 NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }

" My Bundles here:
"
" Note: You don't set neobundle setting in .gvimrc!
" Original repos on github
"NeoBundle 'Lokaltog/vim-easymotion' 
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'Raimondi/delimitMate'
NeoBundle 'goldfeld/vim-seek'

"Needed by Many plugins
NeoBundle 'MarcWeber/vim-addon-mw-utils'

"Buffer management
NeoBundle 'fholgado/minibufexpl.vim'
NeoBundle 'octol/vim-cpp-enhanced-highlight'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'terryma/vim-smooth-scroll'
NeoBundle 'jimsei/winresizer'
"Code Completion
"NeoBundle 'Shougo/neocomplcache'
"NeoBundle 'ujihisa/neco-look'
"NeoBundle 'Rip-Rip/clang_complete'
";W
"
"if !has('gui_gtk2')
    NeoBundle 'ervandew/supertab'
"endif

"Snippets
"NeoBundle 'scrooloose/snipmate-snippets'
"NeoBundle 'garbas/vim-snipmate'
"Useful
"NeoBundle 'Shougo/neosnippet'
"NeoBundle 'honza/vim-snippets'
"Useful
"NeoBundle 'SirVer/ultisnips'

NeoBundle 'kien/ctrlp.vim'

"Unite plugins
"NeoBundle 'Shougo/unite.vim'
"NeoBundle 'h1mesuke/unite-outline'
"NeoBundle 'tsukkee/unite-tag'
"
NeoBundle 'nathanaelkane/vim-indent-guides'

"Python-based original powerline
"NeoBundle 'Lokaltog/powerline'
"Vimscript-based powerline clone
NeoBundle 'bling/vim-airline'
"NeoBundle 'Lokaltog/powerline-fonts'
NeoBundle 'runsisi/consolas-font-for-powerline'
"Syntax Plugins
NeoBundle 'tikhomirov/vim-glsl'
NeoBundle 'beyondmarc/hlsl.vim'
"Interesting alternative to taglist. Was SLOW though.
"NeoBundle 'majutsushi/tagbar'

"Linux-based code completion
"if has ('gui_gtk2')
    "NeoBundle 'Valloric/YouCompleteMe'
"endif

" vim-scripts repos
NeoBundle 'L9'
NeoBundle 'taglist.vim'
NeoBundle 'a.vim'

" Non github repos
"NeoBundle 'git://git.wincent.com/command-t.git'

" gist repos
"NeoBundle 'gist:Shougo/656148', {
"      \ 'name': 'everything.vim',
"      \ 'script_type': 'plugin'}

" Non git repos
NeoBundle 'https://bitbucket.org/abudden/easycolour'
NeoBundle 'https://bitbucket.org/abudden/taghighlight'
"if !has('gui_gtk2')
    NeoBundle 'https://bitbucket.org/ns9tks/vim-autocomplpop/'
"endif
"NeoBundle 'http://svn.macports.org/repository/macports/contrib/mpvim/'
NeoBundle 'jcf/vim-latex'
NeoBundleCheck

"=======================================================================================
"                                  General VimRC Setup
"=======================================================================================
if has("win32")
    set guifont=Powerline\ Consolas:h11
elseif has ("mac")
    set guifont=Consolas:h11 
else
    set guifont=Powerline\ Consolas\ 11
endif

colorscheme default_modified
set number
set expandtab
set tabstop=4
set shiftwidth=4
set cindent
set nobackup
set hidden
set noswapfile
set undolevels=1000      " use many muchos levels of undo
set statusline=%t%m%r%h%w\ [%{&ff}]\ %y\ [%l/%L--%c]\ [%p%%]
set laststatus=2 
set cursorline
set cinoptions+=g0,h4
set ignorecase
set hlsearch
set nowrap
vnoremap w iw
syntax on
if has ('gui_gtk2')
    set clipboard=unnamed
    set guiheadroom=0
    set t_Co=256
endif

"OS X Specific
"if has("mac")
" set the cursor to a vertical line in insert mode and a solid block
" in command mode
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
"endif

"Disable beeps and flashing
set noerrorbells visualbell t_vb=
if has('autocmd')
  autocmd GUIEnter * set visualbell t_vb=
endif

nnoremap ; :
nnoremap <C-0> :MBEbn<CR>
nnoremap <C-9> :MBEbp<CR>

function! IsSourceBuffer()
    "let l:nerd_buf = 1
    "let l:taglist_buf = 1
    "if exists("t:NERDTreeBufName")
        "let l:nerd_buf = winnr() != bufwinnr(t:NERDTreeBufName)
    "endif
    "if exists("g:TagList_title")
        "let l:taglist_buf = winnr() != bufwinnr(g:TagList_title)
    "endif
    "return l:nerd_buf && l:taglist_buf
    return (&ft != 'nerdtree' && &ft != 'taglist')
endfunction

function! IsNERDTreeOpen()
    if exists("t:NERDTreeBufName")
        return bufwinnr(t:NERDTreeBufName) != -1
    else
        return 0
    endif
endfunction

function! IsTagListOpen()
    if exists("g:TagList_title")
        return bufwinnr(g:TagList_title) != -1
    else
        return 0
    endif
endfunction

function! s:CloseIfAllSourceClosed()
    let l:numUtilBufs = IsNERDTreeOpen() ? 1 : 0
    let l:numUtilBufs += IsTagListOpen() ? 1 : 0
    if winnr("$") == l:numUtilBufs
        qa
    endif
endfunction

"Close if we no longer have any source windows open
autocmd WinEnter * call s:CloseIfAllSourceClosed()

function s:PushCurWin()
    let g:cur_win_id = winnr()
endfunction

function s:PopCurWin()
    silent! execute g:cur_win_id .'wincmd w'
endfunction

"=======================================================================================
"                              Relative Line Number Settings
"=======================================================================================
function! NumberToggle()
    if(IsSourceBuffer())
        if(&relativenumber == 1)
            set number
        else
            set relativenumber
        endif
    endif
endfunction

function! EnableRelativeNumber()
    if(IsSourceBuffer())
        set relativenumber
        "if IsTagListOpen()
            "let l:prev_win_id = winnr()
            "let l:tagwinnr = bufwinnr(g:TagList_title)
            "silent! execute l:tagwinnr .'wincmd w'
            "set norelativenumber
            "set nonumber
            "silent! execute l:prev_win_id .'wincmd w'
        "endif
    endif
endfunction

function! DisableRelativeNumber()
    if(IsSourceBuffer())
        set number
    endif
endfunction

"au BufEnter * :call EnableRelativeNumber()
"au BufLeave * :call DisableRelativeNumber()

"Format line numbers to be 4 numbers wide
"au FocusLost   * :call DisableRelativeNumber()
"au FocusGained * :call EnableRelativeNumber()
au BufNewFile,BufReadPost * :call EnableRelativeNumber()
"autocmd FileType nerdtree setlocal norelativenumber
autocmd FileType taglist setlocal norelativenumber
au InsertEnter * :call DisableRelativeNumber()
au InsertLeave * :call EnableRelativeNumber()
nnoremap <Leader>n :call NumberToggle()<cr>
set nuw=5

"=======================================================================================
"                                  GUI Toggle Settings
"=======================================================================================
function! ToggleGUICruft()
  if &guioptions=='i'
    exec('set guioptions=imTrL')
  else
    exec('set guioptions=i')
  endif
endfunction

let g:tvmode = 0
function! ToggleFontSize()
  if g:tvmode == 1
    exec('set guifont=Lucida\ Console:h9:cANSI')
    colorscheme default_modified
let g:tvmode = 0
  else
    exec('set guifont=Lucida\ Console:h14:cANSI')
    colorscheme mustang
    let g:tvmode = 1
  endif
endfunction

"=======================================================================================
"                                  Fullscreen Setup
"=======================================================================================
map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
au GUIEnter * : call foreground()
if has("win32")
    if has("gui_running")
        au GUIEnter * simalt ~x "x on an English Windows version. n on a French one
    endif
endif

map <F10> <Esc>:call ToggleGUICruft()<cr>
map <F9> <Esc>:call ToggleFontSize()<cr>
"map <F2> <Esc>:silent! !ctags -R &<cr>
map <F2> <Esc>:silent! !ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
map <F3> <Esc>:UpdateTypesFile<cr>

" by default, hide gui menus
set guioptions=i

filetype plugin on

"=======================================================================================
"                                SuperTab Settings
"=======================================================================================
"if !has("gui_gtk2")
    let g:SuperTabDefaultCompletionType = "context"
    let g:SuperTabLongestEnhanced = 1
    let g:SuperTabLongestHighlight = 1
"endif
"set completeopt=menuone,menu,longest
"set pumheight=15

"=======================================================================================
"                            Window Navigation Settings
"=======================================================================================
nnoremap <C-J>     <C-W>j
nnoremap <C-K>     <C-W>k
nnoremap <C-H>     <C-W>h
nnoremap <C-L>     <C-W>l

"=======================================================================================
"                                MiniBufExpl Settings
"=======================================================================================
"Switch tabs using ctrl + tab / ctrl + shift + tab
noremap <C-TAB>   :MBEbn<CR>
noremap <C-S-TAB> :MBEbp<CR>

"Properly close buffers
nnoremap <Leader>bd :MBEbd<cr>
nnoremap <Leader>bw :MBEbw<cr>
nnoremap <Leader>bun :MBEbun<cr>


let g:miniBufExplCycleArround = 1
let g:miniBufExplUseSingleClick = 1

" MiniBufExpl Colors
hi MBENormal               guifg=#808080 guibg=fg
hi MBEChanged              guifg=#fa714e guibg=fg
hi MBEVisibleNormal        guifg=#84cae6 guibg=fg
hi MBEVisibleChanged       guifg=#fa714e guibg=fg
hi MBEVisibleActiveNormal  guifg=#ffcd22 guibg=fg
hi MBEVisibleActiveChanged guifg=#ffcd22 guibg=fg


"=======================================================================================
"                                   Ctrl-P Settings
"=======================================================================================
let g:ctrlp_working_path_mode = 'rc'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|obj|dll)$',
    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
    \ }

"=======================================================================================
"                                   Unite Settings
"=======================================================================================
"call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_rank'])

"if executable('ag')
    "let g:unite_source_grep_command = 'ag'
    "let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
    "let g:unite_source_grep_recursive_opt = ''
"elseif executable('ack')
    "let g:unite_source_rec_async_command = 'ack -f --nofilter'
    ""let g:unite_source_grep_default_opts = '--nogroup --nocolor'
    ""let g:unite_source_grep_default_opts = '-f --nofilter'
    ""let g:unite_source_grep_recursive_opt = ''
    ""let g:unite_source_grep_command = 'ack-grep'
"endif

"let g:unite_source_rec_min_cache_files = 100
"nnoremap <space>f :<C-u>Unite -start-insert file_rec/async:!<CR>
""nnoremap <space>f :<C-u>Unite -start-insert file_rec:!<CR>
""nnoremap <space>g :<C-u>Unite grep:.<CR>
"nnoremap <space>s :Unite -quick-match buffer<cr>
"nnoremap <space>t :Unite -quick-match tag<cr>
"nnoremap <space>o :Unite -quick-match outline<cr>

"" Custom mappings for the unite buffer
"autocmd FileType unite :call s:unite_settings()

"function! s:unite_settings()
  "" Play nice with supertab
  "let b:SuperTabDisabled=1
  "" Enable navigation with control-j and control-k in insert mode
  "imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  "imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  "silent! AcpLock
  "augroup UniteAutoDisableACP
      "autocmd!
      "autocmd! UniteAutoDisableACP BufEnter,FocusLost,WinLeave,BufHidden * :call s:unite_on_leave()
  "augroup END
"endfunction

"function! s:unite_on_leave()
    "" resume autocomplpop.vim
    "silent! AcpUnlock
    "augroup UniteAutoDisableACP
        "autocmd!
    "augroup END
"endfunction

"=======================================================================================
"                                   GREP Keybindings
"=======================================================================================
map <F4> :execute "vimgrep! /" . expand("<cword>") . "/j **.cpp **.c **.h **.txt **.fx" <bar> cw<CR><C-W><C-P>
command FW :execute "vimgrep! /" . expand("<cword>") . "/j **.cpp **.c **.h **.txt **.fx" <bar> cw <bar> normal <C-W><C-P>
command -nargs=* FF :execute "vimgrep! /" . expand("<args>") . "/j **.cpp **.c **.h **.txt **.fx" <bar> cw <bar> normal <C-W><C-P>

"au BufWritePost *.c,*.cpp,*.h call s:ExecuteInShellHidden("silent! !ctags -R &")

"=======================================================================================
"                                   Build Settings
"=======================================================================================
if has("win32")
set makeprg=amake
else
set makeprg=make
endif
set switchbuf=usetab

map <F5> :mak<CR>
map <F6> :Acad<CR>

"=======================================================================================
"                              QuickFix Window Settings
"=======================================================================================
"Make sure the quick fix window is the right size when its opened
au FileType qf call AdjustWindowHeight(3, 10)
function! AdjustWindowHeight(minheight, maxheight)
   let l = 1
   let n_lines = 0
   let w_width = winwidth(0)
   while l <= line('$')
       " number to float for division
       let l_len = strlen(getline(l)) + 0.0
       let line_width = l_len/w_width
       let n_lines += float2nr(ceil(line_width))
       let l += 1
   endw
   exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
endfunction

" Assign some keys for handy quickfix window commands.
if has("win32")
  nnoremap <kPlus>     :call <SID>Fancy_Quickfix_Cmd(':cnext')<CR>
  nnoremap <kMinus>    :call <SID>Fancy_Quickfix_Cmd(':cprev')<CR>
  nnoremap <kMultiply> :call <SID>Fancy_Quickfix_Cmd(':cc')<CR>
  nnoremap <c-kPlus>   :clast<CR>
  nnoremap <c-kMinus>  :cfirst<CR>
  nnoremap <m-kPlus>   :cnewer<CR>
  nnoremap <m-kMinus>  :colder<CR>
endif

" Very simple wrapper: do quickfix cmd, center line and,
" if taglist.vim's window is open, sync.
function s:Fancy_Quickfix_Cmd(Cmd)
  try
    execute a:Cmd
  catch /^Vim(\a\+):E553:/
    echohl ErrorMsg | echo v:exception | echohl None
  endtry
  norm! zz
  " If the taglist window is open then :TlistSync
  "    Tag list window name: '__Tag_List__'
  if IsTagListOpen()
    TlistSync
  endif
endfunction


" Command Make will call make and then cwindow which
" opens a 3 line error window if any errors are found.
" If no errors, it closes any open cwindow.
"command -nargs=* Make make <args> | copen 3

" Automatically open, but do not go to (if there are errors) the quickfix /
" location list window, or close it when is has become empty.
"
" Note: Must allow nesting of autocmds to enable any customizations for quickfix
" buffers.
" Note: Normally, :cwindow jumps to the quickfix window if the command opens it
" (but not if it's already open). However, as part of the autocmd, this doesn't
" seem to happen.
autocmd QuickFixCmdPost [^l]* nested cwindow 8
autocmd QuickFixCmdPost    l* nested lwindow
"Switch to buffer after quickfix
autocmd FileType qf wincmd J


"=======================================================================================
"                         Shell Execution Utility Functions
"=======================================================================================
function! s:ExecuteInShell(command)
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  silent! execute 'resize ' . line('$')
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
endfunction

function! s:ExecuteInShellHidden(command)
  call s:PushCurWin()
  let command = join(map(split(a:command), 'expand(v:val)'))
  let winnr = bufwinnr('^' . command . '$')
  silent! execute  winnr < 0 ? 'botright new ' . fnameescape(command) : winnr . 'wincmd w'
  setlocal buftype=nowrite bufhidden=wipe nobuflisted noswapfile nowrap number
  echo 'Execute ' . command . '...'
  silent! execute 'silent %!'. command
  "silent! execute 'resize 0'
  silent! execute 'hide'
  silent! redraw
  silent! execute 'au BufUnload <buffer> execute bufwinnr(' . bufnr('#') . ') . ''wincmd w'''
  silent! execute 'nnoremap <silent> <buffer> <LocalLeader>r :call <SID>ExecuteInShell(''' . command . ''')<CR>'
  echo 'Shell command ' . command . ' executed.'
  call s:PopCurWin()
endfunction
command! -complete=shellcmd -nargs=+ Shell call s:ExecuteInShell(<q-args>)
command! -complete=shellcmd Acad call s:ExecuteInShellHidden("acad")
command! -complete=shellcmd Mak call s:ExecuteInShellHidden("mak")

"=======================================================================================
"                             Shader Syntax Settings
"=======================================================================================
au BufNewFile,BufRead *.vp,*.fp,*.gp,*.vs,*.fs,*.gs,*.tcs,*.tes,*.cs,*.vert,*.frag,*.geom,*.tess,*.shd,*.gls,*.glsl set ft=glsl
au BufNewFile,BufRead *.fx,*.fxc,*.fxh,*.hlsl set ft=hlsl
"GScript Syntax Highlighting
au BufRead,BufNewFile *.gs2 setfiletype gscript | set tabstop=2 | shiftwidth=2

"=======================================================================================
"                               EasyMotion Settings
"=======================================================================================
"EasyMotion Configuration
"let g:EasyMotion_leader_key = '<Leader>'

"=======================================================================================
"                                 NERDTree Settings
"=======================================================================================
"NERDTree Configuration
nnoremap <C-e> :NERDTreeToggle<CR> <bar> <C-w>=
" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer

" Open NERDTree on startup
"autocmd VimEnter * NERDTree
"autocmd VimEnter * wincmd w

"=======================================================================================
"                                 LaTeX Settings
"=======================================================================================
" IMPORTANT: win32 users will need to have 'shellslash' set so that latex
" can be called correctly.
set shellslash

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

au BufRead,BufNewFile *.tex noremap j gj
au BufRead,BufNewFile *.tex noremap k gk
au BufRead,BufNewFile *.tex set formatoptions=l
au BufRead,BufNewFile *.tex set lbr

if has('gui_gtk2')
    let g:Tex_ViewRule_pdf = 'evince'
else
    let g:Tex_ViewRule_pdf = 'SumatraPDF'
endif
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_pdf = 'pdflatex --synctex=-1 -src-specials -interaction=nonstopmode $*'
set nofoldenable
nnoremap <SID><leader>c <Plug>IMAP_JumpForward

"=======================================================================================
"                            Smooth Scrolling Settings
"=======================================================================================
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 12, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 12, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 12, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 12, 4)<CR>

"=======================================================================================
"                            Multiple Cursor Settings
"=======================================================================================
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0

"=======================================================================================
"                            Window Resizer Settings
"=======================================================================================
let g:winresizer_start_key = '<C-T>'

"=======================================================================================
"                            Clang-Complete Settings
"=======================================================================================
"let g:clang_user_options='-std=c++0x -x c++' 
"map <F7>  :call g:ClangUpdateQuickFix()<CR>

""let g:clang_auto_user_options='path, .clang_complete'
""let g:clang_user_options='-std=c++11 || exit 0'
"let g:clang_use_library = 1
"let g:clang_library_path='C:\Clang\build\bin\Release'
"let g:clang_periodic_quickfix=1
"let g:clang_hl_errors=1
""let g:clang_complete_auto = 0
"let g:clang_complete_copen=1
"let g:clang_debug = 1

"=======================================================================================
"                            NeoCompleteCache Settings
"=======================================================================================
""Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
"" Disable AutoComplPop.
"let g:acp_enableAtStartup = 0
"" Use neocomplcache.
"let g:neocomplcache_enable_at_startup = 1
"" Use smartcase.
"let g:neocomplcache_enable_smart_case = 1
"" Set minimum syntax keyword length.
"let g:neocomplcache_min_syntax_length = 3
"let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

"" Enable heavy features.
"" Use camel case completion.
""let g:neocomplcache_enable_camel_case_completion = 1
"" Use underbar completion.
""let g:neocomplcache_enable_underbar_completion = 1

"" Define dictionary.
"let g:neocomplcache_dictionary_filetype_lists = {
    "\ 'default' : '',
    "\ 'vimshell' : $HOME.'/.vimshell_hist',
    "\ 'scheme' : $HOME.'/.gosh_completions'
        "\ }

"" Define keyword.
"if !exists('g:neocomplcache_keyword_patterns')
    "let g:neocomplcache_keyword_patterns = {}
"endif
"let g:neocomplcache_keyword_patterns['default'] = '\h\w*'

"" Plugin key-mappings.
"inoremap <expr><C-g>     neocomplcache#undo_completion()
"inoremap <expr><C-l>     neocomplcache#complete_common_string()

"" Recommended key-mappings.
"" <CR>: close popup and save indent.
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
  "return neocomplcache#smart_close_popup() . "\<CR>"
  "" For no inserting <CR> key.
  ""return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
"endfunction
"" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"" <C-h>, <BS>: close popup and delete backword char.
"inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
"inoremap <expr><C-y>  neocomplcache#close_popup()
"inoremap <expr><C-e>  neocomplcache#cancel_popup()
"" Close popup by <Space>.
""inoremap <expr><Space> pumvisible() ? neocomplcache#close_popup() : "\<Space>"

"" For cursor moving in insert mode(Not recommended)
""inoremap <expr><Left>  neocomplcache#close_popup() . "\<Left>"
""inoremap <expr><Right> neocomplcache#close_popup() . "\<Right>"
""inoremap <expr><Up>    neocomplcache#close_popup() . "\<Up>"
""inoremap <expr><Down>  neocomplcache#close_popup() . "\<Down>"
"" Or set this.
""let g:neocomplcache_enable_cursor_hold_i = 1
"" Or set this.
""let g:neocomplcache_enable_insert_char_pre = 1

"" AutoComplPop like behavior.
""let g:neocomplcache_enable_auto_select = 1

"" Shell like behavior(not recommended).
""set completeopt+=longest
""let g:neocomplcache_enable_auto_select = 1
""let g:neocomplcache_disable_auto_complete = 1
""inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

"" Enable omni completion.
"autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
"autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
"autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
"autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"" Enable heavy omni completion.
"if !exists('g:neocomplcache_omni_patterns')
  "let g:neocomplcache_omni_patterns = {}
"endif
"let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

"" For perlomni.vim setting.
"" https://github.com/c9s/perlomni.vim
"let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

"=======================================================================================
"                            NeoSnippets Settings
"=======================================================================================
" Plugin key-mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
"imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)"
"\: pumvisible() ? "\<C-n>" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)"
"\: "\<TAB>"

"" For snippet_complete marker.
"if has('conceal')
  "set conceallevel=2 concealcursor=i
"endif

"" Enable snipMate compatibility feature.
"let g:neosnippet#enable_snipmate_compatibility = 1

"" Tell Neosnippet about the other snippets
"let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

"=======================================================================================
"                            Vim Indent Guides
"=======================================================================================
let g:indent_guides_start_level = 2
let g:indent_guides_guide_size = 1
au GUIEnter * :IndentGuidesEnable

"=======================================================================================
"                                   Powerline Settings
"=======================================================================================
"Powerline configuration
set encoding=utf-8
set laststatus=2
set t_Co=256
let g:Powerline_symbols = "fancy"
"This is needed if enabling powerline
"set rtp+=$HOME/.vim/bundle/powerline/powerline/bindings/vim
let g:airline_powerline_fonts=1
let g:airline_theme='badwolf'
let g:airline_section_b = '%{getcwd()}'
let g:airline_section_c = '%t'
let g:airline_section_y = 'B%{bufnr("%")}'

let g:airline#extensions#whitespace#enabled = 0
"let g:airline_section_a = '%{airline#extensions#whitespace#check()}'

"=======================================================================================
"                                Taglist Settings
"=======================================================================================
let Tlist_Show_One_File = 1
let Tlist_Use_Right_Window = 1
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_WinWidth = 40

"Tagbar variant
"let g:tagbar_iconchars = ['▾', '▸']
"let g:tagbar_autoshowtag = 1
"let g:tagbar_compact = 1
"setlocal updatetime=300

function! ToggleTagList()
  call s:PushCurWin()
  TlistToggle
  "TagbarToggle
  call s:PopCurWin()
endfunction

nnoremap <silent> <space>t :call ToggleTagList()<cr>
"autocmd CursorMoved * silent! TlistHighlightTag

"=======================================================================================
"                                   Unused Settings
"=======================================================================================
set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let eq = ''
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      let cmd = '""' . $VIMRUNTIME . '\diff"'
      let eq = '"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3 . eq
endfunction
